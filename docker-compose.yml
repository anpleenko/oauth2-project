services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    volumes:
      - mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    networks:
      - microservices

  fastapi-todo-service:
    container_name: todo-api
    build:
      context: ./fastapi-todo-service
      dockerfile: Dockerfile
    depends_on:
      - mongodb
    environment:
      ATLAS_URI: mongodb://root:password@mongodb:27017
      DB_NAME: todoapi
    networks:
      - microservices

  next-todo-app:
    container_name: todo-client
    build:
      context: ./next-todo-app
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    networks:
      - client-host

  api-gateway:
    container_name: nginx
    build:
      context: ./todo-api-gateway
      dockerfile: Dockerfile
    depends_on:
      - fastapi-todo-service
    ports:
      - 80:80
    networks:
      - microservices

  oauth2-proxy:
    container_name: oauth2-proxy
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.7.1
    command: --config /oauth2-proxy.cfg --skip-auth-preflight=true
    hostname: oauth2-proxy
    volumes:
      - "./oauth2-proxy/oauth2-proxy-keycloak.cfg:/oauth2-proxy.cfg"
    restart: unless-stopped
    environment:
      - OAUTH2_PROXY_EMAIL_DOMAINS=*
      - OAUTH2_PROXY_REVERSE_PROXY=true
      - OAUTH2_PROXY_REDIRECT_URL=http://localhost/oauth2/callback
      - OAUTH2_PROXY_COOKIE_SECURE=false
      - OAUTH2_PROXY_UPSTREAM=http://todo-api:8000
      - OAUTH2_PROXY_HTTP_ADDRESS=http://0.0.0.0:4180
      - OAUTH2_PROXY_SET_AUTHORIZATION_HEADER=true
      - OAUTH2_PROXY_SET_XAUTHREQUEST=true
      - OAUTH2_PROXY_WHITELIST_DOMAINS=.localhost:3000
    networks:
      - microservices
    extra_hosts:
     - "localhost:172.18.0.5"

  keycloak:
    container_name: keycloak
    image: keycloak/keycloak:25.0
    hostname: keycloak
    command:
      - 'start-dev'
      - '--http-port=9080'
      - '--import-realm'
    volumes:
      - ./oauth2-proxy/keycloak:/opt/keycloak/data/import
    environment:
      KC_HTTP_PORT: 9080
      KEYCLOAK_ADMIN: admin@example.com
      KEYCLOAK_ADMIN_PASSWORD: password
      KC_DB: postgres
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_DB_URL: "jdbc:postgresql://postgres:5432/postgres"
    ports:
      - 9080:9080
    networks:
      microservices:
        ipv4_address: 172.18.0.5

  postgres:
    container_name: postgres
    image: postgres:15-alpine
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - microservices

networks:
  microservices:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16
          gateway: 172.18.0.1

  client-host:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  postgresql:
      driver: local
  postgresql_data:
      driver: local
